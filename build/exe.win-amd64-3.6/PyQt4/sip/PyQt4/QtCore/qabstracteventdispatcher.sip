// qabstracteventdispatcher.sip generated by MetaSIP
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QAbstractEventDispatcher : QObject
{
%TypeHeaderCode
#include <qabstracteventdispatcher.h>
%End

public:
%If (Qt_5_0_0 -)

    struct TimerInfo
    {
%TypeHeaderCode
#include <qabstracteventdispatcher.h>
%End

        int timerId;
        int interval;
        Qt::TimerType timerType;
        TimerInfo(int id, int i, Qt::TimerType t);
    };

%End
%If (- Qt_5_0_0)
    typedef QPair<int, int> TimerInfo;
%End
    explicit QAbstractEventDispatcher(QObject *parent /TransferThis/ = 0);
    virtual ~QAbstractEventDispatcher();
    static QAbstractEventDispatcher *instance(QThread *thread = 0);
    virtual bool processEvents(QFlags<QEventLoop::ProcessEventsFlag> flags) = 0 /ReleaseGIL/;
    virtual bool hasPendingEvents() = 0;
    virtual void registerSocketNotifier(QSocketNotifier *notifier) = 0;
    virtual void unregisterSocketNotifier(QSocketNotifier *notifier) = 0;
%If (Qt_5_0_0 -)
    int registerTimer(int interval, Qt::TimerType timerType /Constrained/, QObject *object);
%End
%If (PyQt_Deprecated_5_0)
    int registerTimer(int interval, QObject *object);
%End
%If (Qt_5_0_0 -)
    virtual void registerTimer(int timerId, int interval, Qt::TimerType timerType, QObject *object) = 0;
%End
%If (PyQt_Deprecated_5_0)
    virtual void registerTimer(int timerId, int interval, QObject *object) = 0;
%End
    virtual bool unregisterTimer(int timerId) = 0;
    virtual bool unregisterTimers(QObject *object) = 0;
%If (Qt_5_0_0 -)
    virtual QList<QAbstractEventDispatcher::TimerInfo> registeredTimers(QObject *object) const = 0;
%End
%If (- Qt_5_0_0)
    virtual QList<QPair<int, int>> registeredTimers(QObject *object) const = 0;
%End
    virtual void wakeUp() = 0;
    virtual void interrupt() = 0;
    virtual void flush() = 0;
    virtual void startingUp();
    virtual void closingDown();
%If (- Qt_5_0_0)
    SIP_PYCALLABLE setEventFilter(SIP_PYCALLABLE filter /AllowNone/);
%MethodCode
        sipRes = qpycore_qabstracteventdispatcher_seteventfilter(sipCpp, a0);
%End

%End
%If (PyQt_Deprecated_5_0)
    bool filterEvent(void *message);
%End
%If (Qt_5_0_0 -)
    virtual int remainingTime(int timerId) = 0;
%End
%If (Qt_5_0_0 -)
    void installNativeEventFilter(QAbstractNativeEventFilter *filterObj);
%End
%If (Qt_5_0_0 -)
    void removeNativeEventFilter(QAbstractNativeEventFilter *filterObj);
%End
%If (Qt_5_0_0 -)
%If (WS_WIN)
    virtual bool registerEventNotifier(QWinEventNotifier *notifier) = 0;
%End
%End
%If (Qt_5_0_0 -)
%If (WS_WIN)
    virtual void unregisterEventNotifier(QWinEventNotifier *notifier) = 0;
%End
%End

signals:
    void aboutToBlock();
    void awake();
};
