// qdrag.sip generated by MetaSIP
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QDrag : QObject
{
%TypeHeaderCode
#include <qdrag.h>
%End

public:
%If (Qt_5_0_0 -)
    explicit QDrag(QObject *dragSource /TransferThis/);
%End
%If (- Qt_5_0_0)
    explicit QDrag(QWidget *dragSource /TransferThis/);
%End
    virtual ~QDrag();
%If (Qt_4_3_0 -)
    Qt::DropAction exec(Qt::DropActions supportedActions = Qt::MoveAction) /PyName=exec_,ReleaseGIL/;
%End
%If (Qt_4_3_0 -)
%If (Py_v3)
    Qt::DropAction exec(Qt::DropActions supportedActions = Qt::MoveAction) /ReleaseGIL/;
%End
%End
%If (Qt_4_3_0 -)
    Qt::DropAction exec(Qt::DropActions supportedActions, Qt::DropAction defaultDropAction) /PyName=exec_,ReleaseGIL/;
%End
%If (Qt_4_3_0 -)
    Qt::DropAction exec(Qt::DropActions supportedActions, Qt::DropAction defaultDropAction) /ReleaseGIL/;
%End
    void setMimeData(QMimeData *data /Transfer/);
    QMimeData *mimeData() const;
    void setPixmap(const QPixmap &);
    QPixmap pixmap() const;
    void setHotSpot(const QPoint &hotspot);
    QPoint hotSpot() const;
%If (Qt_5_0_0 -)
    QObject *source() const;
%End
%If (- Qt_5_0_0)
    QWidget *source() const;
%End
%If (Qt_5_0_0 -)
    QObject *target() const;
%End
%If (- Qt_5_0_0)
    QWidget *target() const;
%End
    Qt::DropAction start(Qt::DropActions supportedActions = Qt::CopyAction) /ReleaseGIL/;
    void setDragCursor(const QPixmap &cursor, Qt::DropAction action);

signals:
    void actionChanged(Qt::DropAction action);
%If (Qt_5_0_0 -)
    void targetChanged(QObject *newTarget);
%End
%If (- Qt_5_0_0)
    void targetChanged(QWidget *newTarget);
%End

public:
%If (Qt_5_0_0 -)
    QPixmap dragCursor(Qt::DropAction action) const;
%End
%If (Qt_5_0_0 -)
    Qt::DropActions supportedActions() const;
%End
%If (Qt_5_0_0 -)
    Qt::DropAction defaultAction() const;
%End

private:
    QDrag(const QDrag &);
};
