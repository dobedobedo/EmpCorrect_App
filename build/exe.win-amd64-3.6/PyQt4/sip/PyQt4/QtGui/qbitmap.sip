// qbitmap.sip generated by MetaSIP
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qbitmap.h>
%End

class QBitmap : QPixmap
{
%TypeHeaderCode
#include <qbitmap.h>
%End

public:
    QBitmap();
    QBitmap(const QPixmap &);
    QBitmap(int w, int h);
    explicit QBitmap(const QSize &);
    QBitmap(const QString &fileName, const char *format = 0);
    QBitmap(const QVariant &variant /GetWrapper/) /NoDerived/;
%MethodCode
        #if QT_VERSION >= 0x050000
        if (a0->canConvert<QBitmap>())
            sipCpp = new sipQBitmap(a0->value<QBitmap>());
        #else
        if (qVariantCanConvert<QBitmap>(*a0))
            sipCpp = new sipQBitmap(qVariantValue<QBitmap>(*a0));
        #endif
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
%End

    virtual ~QBitmap();
    void clear();
    static QBitmap fromImage(const QImage &image, Qt::ImageConversionFlags flags = Qt::AutoColor);
    static QBitmap fromData(const QSize &size, const uchar *bits, QImage::Format format = QImage::Format_MonoLSB);
    QBitmap transformed(const QMatrix &) const;
%If (Qt_4_3_0 -)
    QBitmap transformed(const QTransform &matrix) const;
%End
%If (Qt_4_8_0 -)
    void swap(QBitmap &other);
%End
};

%If (Qt_4_3_0 -)
void qSwap(QBitmap &value1, QBitmap &value2);
%End
