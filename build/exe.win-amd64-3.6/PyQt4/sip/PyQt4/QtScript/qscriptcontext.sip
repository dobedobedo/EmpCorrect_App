// qscriptcontext.sip generated by MetaSIP
//
// This file is part of the QtScript Python extension module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_3_0 -)

class QScriptContext
{
%TypeHeaderCode
#include <qscriptcontext.h>
%End

public:
    enum ExecutionState
    {
        NormalState,
        ExceptionState,
    };

    enum Error
    {
        UnknownError,
        ReferenceError,
        SyntaxError,
        TypeError,
        RangeError,
        URIError,
    };

    ~QScriptContext();
    QScriptContext *parentContext() const;
    QScriptEngine *engine() const;
    QScriptContext::ExecutionState state() const;
    QScriptValue callee() const;
    int argumentCount() const;
    QScriptValue argument(int index) const;
    QScriptValue argumentsObject() const;
    QScriptValue activationObject() const;
    void setActivationObject(const QScriptValue &activation);
    QScriptValue thisObject() const;
    void setThisObject(const QScriptValue &thisObject);
    bool isCalledAsConstructor() const;
    QStringList backtrace() const;
    QScriptValue throwValue(const QScriptValue &value);
    QScriptValue throwError(QScriptContext::Error error, const QString &text);
    QScriptValue throwError(const QString &text);
%If (Qt_4_4_0 -)
    QString toString() const;
%End

private:
    QScriptContext();
    QScriptContext(const QScriptContext &);
};

%End
