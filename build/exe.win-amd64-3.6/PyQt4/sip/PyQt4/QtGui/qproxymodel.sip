// qproxymodel.sip generated by MetaSIP
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (- Qt_5_0_0)

class QProxyModel : QAbstractItemModel
{
%TypeHeaderCode
#include <qproxymodel.h>
%End

public:
    explicit QProxyModel(QObject *parent /TransferThis/ = 0);
    virtual ~QProxyModel();
    virtual void setModel(QAbstractItemModel *model /KeepReference/);
    QAbstractItemModel *model() const;
%If (- Qt_4_7_0)
    virtual QModelIndex index(int row, int column, const QModelIndex &parent) const;
%End
%If (Qt_4_7_0 -)
    virtual QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
%End
    virtual QModelIndex parent(const QModelIndex &child) const;
    QObject *parent() const;
%If (- Qt_4_7_0)
    virtual int rowCount(const QModelIndex &parent) const;
%End
%If (Qt_4_7_0 -)
    virtual int rowCount(const QModelIndex &parent = QModelIndex()) const;
%End
%If (- Qt_4_7_0)
    virtual int columnCount(const QModelIndex &parent) const;
%End
%If (Qt_4_7_0 -)
    virtual int columnCount(const QModelIndex &parent = QModelIndex()) const;
%End
%If (- Qt_4_7_0)
    virtual bool hasChildren(const QModelIndex &parent) const;
%End
%If (Qt_4_7_0 -)
    virtual bool hasChildren(const QModelIndex &parent = QModelIndex()) const;
%End
%If (- Qt_4_7_0)
    virtual QVariant data(const QModelIndex &index, int role) const;
%End
%If (Qt_4_7_0 -)
    virtual QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
%End
%If (- Qt_4_7_0)
    virtual bool setData(const QModelIndex &index, const QVariant &value, int role);
%End
%If (Qt_4_7_0 -)
    virtual bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);
%End
%If (- Qt_4_7_0)
    virtual QVariant headerData(int section, Qt::Orientation orientation, int role) const;
%End
%If (Qt_4_7_0 -)
    virtual QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const;
%End
%If (- Qt_4_7_0)
    virtual bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role);
%End
%If (Qt_4_7_0 -)
    virtual bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role = Qt::EditRole);
%End
    virtual QStringList mimeTypes() const;
    virtual QMimeData *mimeData(const QModelIndexList &indexes) const /TransferBack/;
    virtual bool dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &parent);
    virtual Qt::DropActions supportedDropActions() const;
%If (- Qt_4_7_0)
    virtual bool insertRows(int row, int count, const QModelIndex &parent);
%End
%If (Qt_4_7_0 -)
    virtual bool insertRows(int row, int count, const QModelIndex &parent = QModelIndex());
%End
%If (- Qt_4_7_0)
    virtual bool insertColumns(int column, int count, const QModelIndex &parent);
%End
%If (Qt_4_7_0 -)
    virtual bool insertColumns(int column, int count, const QModelIndex &parent = QModelIndex());
%End
    virtual void fetchMore(const QModelIndex &parent);
    virtual Qt::ItemFlags flags(const QModelIndex &index) const;
%If (- Qt_4_7_0)
    virtual void sort(int column, Qt::SortOrder order);
%End
%If (Qt_4_7_0 -)
    virtual void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);
%End
%If (- Qt_4_7_0)
    virtual QModelIndexList match(const QModelIndex &start, int role, const QVariant &value, int hits, Qt::MatchFlags flags) const;
%End
%If (Qt_4_7_0 -)
    virtual QModelIndexList match(const QModelIndex &start, int role, const QVariant &value, int hits = 1, Qt::MatchFlags flags = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const;
%End
    virtual QSize span(const QModelIndex &index) const;
    virtual bool submit();
    virtual void revert();

private:
    QProxyModel(const QProxyModel &);
};

%End
