// qstate.sip generated by MetaSIP
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)

class QState : QAbstractState
{
%TypeHeaderCode
#include <qstate.h>
%End

public:
    enum ChildMode
    {
        ExclusiveStates,
        ParallelStates,
    };

%If (Qt_5_0_0 -)

    enum RestorePolicy
    {
        DontRestoreProperties,
        RestoreProperties,
    };

%End
    QState(QState *parent /TransferThis/ = 0);
    QState(QState::ChildMode childMode, QState *parent /TransferThis/ = 0);
    virtual ~QState();
    QAbstractState *errorState() const;
    void setErrorState(QAbstractState *state /KeepReference/);
    void addTransition(QAbstractTransition *transition /Transfer/);
%If (Qt_5_0_0 -)
    QSignalTransition *addTransition(const QObject *sender, SIP_SIGNAL signal, QAbstractState *target);
%End
%If (- Qt_5_0_0)
    QSignalTransition *addTransition(QObject *sender, SIP_SIGNAL signal, QAbstractState *target);
%End
    QSignalTransition *addTransition(SIP_PYOBJECT signal /DocType="signal"/, QAbstractState *target);
%MethodCode
        QObject *sender;
        const char *signal = qpycore_pyqtsignal_get_parts(a0, &sender);
        
        if (signal)
        {
            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addTransition(sender, signal, a1);
            Py_END_ALLOW_THREADS
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
%End

    QAbstractTransition *addTransition(QAbstractState *target /Transfer/);
    void removeTransition(QAbstractTransition *transition /TransferBack/);
%If (Qt_4_7_0 -)
    QList<QAbstractTransition*> transitions() const;
%End
    QAbstractState *initialState() const;
    void setInitialState(QAbstractState *state /KeepReference/);
    QState::ChildMode childMode() const;
    void setChildMode(QState::ChildMode mode);
    void assignProperty(QObject *object, const char *name, const QVariant &value);

signals:
    void finished();
    void propertiesAssigned();

protected:
    virtual void onEntry(QEvent *event);
    virtual void onExit(QEvent *event);
    virtual bool event(QEvent *e);

private:
    QState(const QState &);
};

%End
