// qtextboundaryfinder.sip generated by MetaSIP
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)
%ModuleCode
#include <qtextboundaryfinder.h>
%End
%End

%If (Qt_4_4_0 -)

class QTextBoundaryFinder
{
%TypeHeaderCode
#include <qtextboundaryfinder.h>
%End

public:
    enum BoundaryReason
    {
        NotAtBoundary,
%If (- Qt_5_0_0)
        StartWord,
%End
%If (- Qt_5_0_0)
        EndWord,
%End
%If (Qt_5_0_0 -)
        SoftHyphen,
%End
%If (Qt_5_0_0 -)
        BreakOpportunity,
%End
%If (Qt_5_0_0 -)
        StartOfItem,
%End
%If (Qt_5_0_0 -)
        EndOfItem,
%End
%If (Qt_5_0_0 -)
        MandatoryBreak,
%End
    };

    typedef QFlags<QTextBoundaryFinder::BoundaryReason> BoundaryReasons;

    enum BoundaryType
    {
        Grapheme,
        Word,
        Line,
        Sentence,
    };

    QTextBoundaryFinder();
    QTextBoundaryFinder(const QTextBoundaryFinder &other);
    QTextBoundaryFinder(QTextBoundaryFinder::BoundaryType type, const QString &string);
    ~QTextBoundaryFinder();
    bool isValid() const;
    QTextBoundaryFinder::BoundaryType type() const;
    QString string() const;
    void toStart();
    void toEnd();
    int position() const;
    void setPosition(int position);
    int toNextBoundary();
    int toPreviousBoundary();
    bool isAtBoundary() const;
    QFlags<QTextBoundaryFinder::BoundaryReason> boundaryReasons() const;
};

%End
%If (Qt_5_0_0 -)
QFlags<QTextBoundaryFinder::BoundaryReason> operator|(QTextBoundaryFinder::BoundaryReason f1, QFlags<QTextBoundaryFinder::BoundaryReason> f2);
%End
