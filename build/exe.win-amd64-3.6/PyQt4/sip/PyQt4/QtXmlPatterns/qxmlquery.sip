// qxmlquery.sip generated by MetaSIP
//
// This file is part of the QtXmlPatterns Python extension module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QXmlQuery
{
%TypeHeaderCode
#include <qxmlquery.h>
%End

public:
%If (Qt_4_5_0 -)

    enum QueryLanguage
    {
        XQuery10,
        XSLT20,
    };

%End
    QXmlQuery();
    QXmlQuery(const QXmlQuery &other);
    QXmlQuery(const QXmlNamePool &np);
%If (Qt_4_5_0 -)
    QXmlQuery(QXmlQuery::QueryLanguage queryLanguage, const QXmlNamePool &pool = QXmlNamePool());
%End
    ~QXmlQuery();
    void setMessageHandler(QAbstractMessageHandler *messageHandler /KeepReference/);
    QAbstractMessageHandler *messageHandler() const;
    void setQuery(const QString &sourceCode, const QUrl &documentUri = QUrl());
    void setQuery(QIODevice *sourceCode, const QUrl &documentUri = QUrl());
    void setQuery(const QUrl &queryURI, const QUrl &baseUri = QUrl());
    QXmlNamePool namePool() const;
    void bindVariable(const QXmlName &name, const QXmlItem &value);
    void bindVariable(const QXmlName &name, QIODevice *);
%If (Qt_4_5_0 -)
    void bindVariable(const QXmlName &name, const QXmlQuery &query);
%End
    void bindVariable(const QString &localName, const QXmlItem &value);
    void bindVariable(const QString &localName, QIODevice *);
%If (Qt_4_5_0 -)
    void bindVariable(const QString &localName, const QXmlQuery &query);
%End
    bool isValid() const;
    void evaluateTo(QXmlResultItems *result) const;
    bool evaluateTo(QAbstractXmlReceiver *callback) const;
    bool evaluateTo(QStringList *target) const /API=QString: - 2/;
    SIP_PYOBJECT evaluateToStringList() const /DocType="Py_v3:list-of-str;QStringList"/;
%MethodCode
        bool ok;
        QStringList *result = new QStringList;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->evaluateTo(result);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            sipRes = sipConvertFromNewType(result, sipType_QStringList, NULL);
        }
        else
        {
            delete result;
            sipRes = Py_None;
            Py_INCREF(Py_None);
        }
%End

%If (Qt_4_5_0 -)
    bool evaluateTo(QIODevice *target) const;
%End
%If (Qt_4_5_0 -)
    bool evaluateTo(QString *output) const /API=QString: - 2/;
%End
%If (Qt_4_5_0 -)
    SIP_PYOBJECT evaluateToString() const /DocType="Py_v3:str;QString"/;
%MethodCode
        bool ok;
        QString *result = new QString;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->evaluateTo(result);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            sipRes = sipConvertFromNewType(result, sipType_QString, NULL);
        }
        else
        {
            delete result;
            sipRes = Py_None;
            Py_INCREF(Py_None);
        }
%End

%End
    void setUriResolver(const QAbstractUriResolver *resolver /KeepReference/);
    const QAbstractUriResolver *uriResolver() const;
    void setFocus(const QXmlItem &item);
%If (Qt_4_5_0 -)
    bool setFocus(const QUrl &documentURI);
%End
%If (Qt_4_5_0 -)
    bool setFocus(QIODevice *document);
%End
%If (Qt_4_6_0 -)
    bool setFocus(const QString &focus);
%End
%If (Qt_4_5_0 -)
    void setInitialTemplateName(const QXmlName &name);
%End
%If (Qt_4_5_0 -)
    void setInitialTemplateName(const QString &name);
%End
%If (Qt_4_5_0 -)
    QXmlName initialTemplateName() const;
%End
%If (Qt_4_5_0 -)
    void setNetworkAccessManager(QNetworkAccessManager *newManager /KeepReference/);
%End
%If (Qt_4_5_0 -)
    QNetworkAccessManager *networkAccessManager() const;
%End
%If (Qt_4_5_0 -)
    QXmlQuery::QueryLanguage queryLanguage() const;
%End
};

%End
