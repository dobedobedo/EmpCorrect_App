// qregion.sip generated by MetaSIP
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qregion.h>
%End

class QRegion
{
%TypeHeaderCode
#include <qregion.h>
%End

public:
    enum RegionType
    {
        Rectangle,
        Ellipse,
    };

    QRegion();
    QRegion(int x, int y, int w, int h, QRegion::RegionType type = QRegion::Rectangle);
    QRegion(const QRect &r, QRegion::RegionType type = QRegion::Rectangle);
    QRegion(const QPolygon &a, Qt::FillRule fillRule = Qt::OddEvenFill);
    QRegion(const QBitmap &bitmap);
    QRegion(const QRegion &region);
    QRegion(const QVariant &variant /GetWrapper/) /NoDerived/;
%MethodCode
        #if QT_VERSION >= 0x050000
        if (a0->canConvert<QRegion>())
            sipCpp = new QRegion(a0->value<QRegion>());
        #else
        if (qVariantCanConvert<QRegion>(*a0))
            sipCpp = new QRegion(qVariantValue<QRegion>(*a0));
        #endif
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
%End

    ~QRegion();
    bool isEmpty() const;
    int __bool__() const;
%MethodCode
        sipRes = !sipCpp->isEmpty();
%End

    bool contains(const QPoint &p) const;
    int __contains__(const QPoint &p) const;
%MethodCode
        sipRes = sipCpp->contains(*a0);
%End

    bool contains(const QRect &r) const;
    int __contains__(const QRect &r) const;
%MethodCode
        sipRes = sipCpp->contains(*a0);
%End

    void translate(int dx, int dy);
    void translate(const QPoint &p);
    QRegion translated(int dx, int dy) const;
    QRegion translated(const QPoint &p) const;
%If (PyQt_Deprecated_5_0)
    QRegion unite(const QRegion &r) const;
%End
%If (Qt_4_2_0 -)
    QRegion united(const QRegion &r) const;
%End
%If (Qt_4_4_0 -)
    QRegion united(const QRect &r) const;
%End
%If (PyQt_Deprecated_5_0)
    QRegion intersect(const QRegion &r) const;
%End
%If (PyQt_Deprecated_5_0)
    QRegion subtract(const QRegion &r) const;
%End
%If (PyQt_Deprecated_5_0)
    QRegion eor(const QRegion &r) const;
%End
    QRect boundingRect() const;
    QVector<QRect> rects() const;
    const QRegion operator|(const QRegion &r) const;
    const QRegion operator+(const QRegion &r) const;
%If (Qt_4_4_0 -)
    const QRegion operator+(const QRect &r) const;
%End
    const QRegion operator&(const QRegion &r) const;
%If (Qt_4_4_0 -)
    const QRegion operator&(const QRect &r) const;
%End
    const QRegion operator-(const QRegion &r) const;
    const QRegion operator^(const QRegion &r) const;
    QRegion &operator|=(const QRegion &r);
    QRegion &operator+=(const QRegion &r);
%If (Qt_4_4_0 -)
    QRegion &operator+=(const QRect &r);
%End
    QRegion &operator&=(const QRegion &r);
%If (Qt_4_4_0 -)
    QRegion &operator&=(const QRect &r);
%End
    QRegion &operator-=(const QRegion &r);
    QRegion &operator^=(const QRegion &r);
    bool operator==(const QRegion &r) const;
    bool operator!=(const QRegion &r) const;
%If (Qt_4_2_0 -)
    QRegion intersected(const QRegion &r) const;
%End
%If (Qt_4_4_0 -)
    QRegion intersected(const QRect &r) const;
%End
%If (Qt_4_2_0 -)
    QRegion subtracted(const QRegion &r) const;
%End
%If (Qt_4_2_0 -)
    QRegion xored(const QRegion &r) const;
%End
%If (Qt_4_2_0 -)
    bool intersects(const QRegion &r) const;
%End
%If (Qt_4_2_0 -)
    bool intersects(const QRect &r) const;
%End
%If (Qt_4_4_0 - Qt_5_0_0)
    int numRects() const;
%End
%If (Qt_4_6_0 -)
    int rectCount() const;
%End
%If (Qt_4_8_0 -)
    void swap(QRegion &other);
%End
%If (Qt_5_0_0 -)
    bool isNull() const;
%End
};

QDataStream &operator<<(QDataStream &, const QRegion & /Constrained/);
QDataStream &operator>>(QDataStream &, QRegion & /Constrained/);
