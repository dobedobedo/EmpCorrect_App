// qglpixelbuffer.sip generated by MetaSIP
//
// This file is part of the QtOpenGL Python extension module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (PyQt_Deprecated_5_0)

class QGLPixelBuffer : QPaintDevice
{
%TypeHeaderCode
#include <qglpixelbuffer.h>
%End

public:
    QGLPixelBuffer(const QSize &size, const QGLFormat &format = QGLFormat::defaultFormat(), QGLWidget *shareWidget = 0);
%If (Qt_4_2_0 -)
    QGLPixelBuffer(int width, int height, const QGLFormat &format = QGLFormat::defaultFormat(), QGLWidget *shareWidget = 0);
%End
    virtual ~QGLPixelBuffer();
    bool isValid() const;
    bool makeCurrent();
    bool doneCurrent();
    GLuint generateDynamicTexture() const;
    bool bindToDynamicTexture(GLuint texture);
    void releaseFromDynamicTexture();
    void updateDynamicTexture(GLuint texture_id) const;
    GLuint bindTexture(const QImage &image, GLenum target = GL_TEXTURE_2D);
    GLuint bindTexture(const QPixmap &pixmap, GLenum target = GL_TEXTURE_2D);
    GLuint bindTexture(const QString &fileName);
%If (Qt_4_4_0 -)
    void drawTexture(const QRectF &target, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D);
%End
%If (Qt_4_4_0 -)
    void drawTexture(const QPointF &point, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D);
%End
    void deleteTexture(GLuint texture_id);
    QSize size() const;
    Qt::HANDLE handle() const;
    QImage toImage() const;
    virtual QPaintEngine *paintEngine() const;
    QGLFormat format() const;
%If (Qt_5_0_0 -)
    QGLContext *context() const;
%End
    static bool hasOpenGLPbuffers();

protected:
    virtual int metric(QPaintDevice::PaintDeviceMetric metric) const;
    virtual int devType() const;

private:
    QGLPixelBuffer(const QGLPixelBuffer &);
};

%End
