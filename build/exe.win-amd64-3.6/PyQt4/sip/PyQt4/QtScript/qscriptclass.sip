// qscriptclass.sip generated by MetaSIP
//
// This file is part of the QtScript Python extension module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)
%ModuleCode
#include <qscriptclass.h>
%End
%End

%If (Qt_4_4_0 -)

class QScriptClass
{
%TypeHeaderCode
#include <qscriptclass.h>
%End

public:
    enum QueryFlag
    {
        HandlesReadAccess,
        HandlesWriteAccess,
    };

    typedef QFlags<QScriptClass::QueryFlag> QueryFlags;

    enum Extension
    {
        Callable,
%If (Qt_4_5_0 -)
        HasInstance,
%End
    };

    QScriptClass(QScriptEngine *engine);
    virtual ~QScriptClass();
    QScriptEngine *engine() const;
    virtual QFlags<QScriptClass::QueryFlag> queryProperty(const QScriptValue &object, const QScriptString &name, QFlags<QScriptClass::QueryFlag> flags, uint *id);
    virtual QScriptValue property(const QScriptValue &object, const QScriptString &name, uint id);
    virtual void setProperty(QScriptValue &object, const QScriptString &name, uint id, const QScriptValue &value);
    virtual QFlags<QScriptValue::PropertyFlag> propertyFlags(const QScriptValue &object, const QScriptString &name, uint id);
    virtual QScriptClassPropertyIterator *newIterator(const QScriptValue &object);
    virtual QScriptValue prototype() const;
    virtual QString name() const;
    virtual bool supportsExtension(QScriptClass::Extension extension) const;
    virtual QVariant extension(QScriptClass::Extension extension, const QVariant &argument /DocValue="Py_v3:None"/ = QVariant());

private:
    QScriptClass(const QScriptClass &);
};

%End
%If (Qt_4_4_0 -)
QFlags<QScriptClass::QueryFlag> operator|(QScriptClass::QueryFlag f1, QFlags<QScriptClass::QueryFlag> f2);
%End
