// qscriptenginedebugger.sip generated by MetaSIP
//
// This file is part of the QtScriptTools Python extension module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_5_0 -)

class QScriptEngineDebugger : QObject
{
%TypeHeaderCode
#include <qscriptenginedebugger.h>
%End

%ConvertToSubClassCode
    if (sipCpp->inherits(sipName_QScriptEngineDebugger))
        sipType = sipType_QScriptEngineDebugger;
    else
        sipType = 0;
%End

public:
    enum DebuggerWidget
    {
        ConsoleWidget,
        StackWidget,
        ScriptsWidget,
        LocalsWidget,
        CodeWidget,
        CodeFinderWidget,
        BreakpointsWidget,
        DebugOutputWidget,
        ErrorLogWidget,
    };

    enum DebuggerAction
    {
        InterruptAction,
        ContinueAction,
        StepIntoAction,
        StepOverAction,
        StepOutAction,
        RunToCursorAction,
        RunToNewScriptAction,
        ToggleBreakpointAction,
        ClearDebugOutputAction,
        ClearErrorLogAction,
        ClearConsoleAction,
        FindInScriptAction,
        FindNextInScriptAction,
        FindPreviousInScriptAction,
        GoToLineAction,
    };

    QScriptEngineDebugger(QObject *parent /TransferThis/ = 0);
    virtual ~QScriptEngineDebugger();
    void attachTo(QScriptEngine *engine);
    void detach();
    bool autoShowStandardWindow() const;
    void setAutoShowStandardWindow(bool autoShow);
    QMainWindow *standardWindow() const /Factory/;
    QToolBar *createStandardToolBar(QWidget *parent /TransferThis/ = 0);
    QMenu *createStandardMenu(QWidget *parent /TransferThis/ = 0);
    QWidget *widget(QScriptEngineDebugger::DebuggerWidget widget) const;
    QAction *action(QScriptEngineDebugger::DebuggerAction action) const;

signals:
    void evaluationSuspended();
    void evaluationResumed();

public:
%If (Qt_4_6_0 -)

    enum DebuggerState
    {
        RunningState,
        SuspendedState,
    };

%End
%If (Qt_4_6_0 -)
    QScriptEngineDebugger::DebuggerState state() const;
%End

private:
    QScriptEngineDebugger(const QScriptEngineDebugger &);
};

%End
