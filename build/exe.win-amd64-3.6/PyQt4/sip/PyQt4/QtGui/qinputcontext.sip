// qinputcontext.sip generated by MetaSIP
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt4.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (- Qt_5_0_0)

class QInputContext : QObject
{
%TypeHeaderCode
#include <qinputcontext.h>
%End

public:
    explicit QInputContext(QObject *parent /TransferThis/ = 0);
    virtual ~QInputContext();
    virtual QString identifierName() = 0;
    virtual QString language() = 0;
    virtual void reset() = 0;
    virtual void update();
    virtual void mouseHandler(int x, QMouseEvent *event);
    virtual QFont font() const;
    virtual bool isComposing() const = 0;
    QWidget *focusWidget() const;
    virtual void setFocusWidget(QWidget *w);
    virtual void widgetDestroyed(QWidget *w);
    virtual QList<QAction*> actions();
    virtual bool filterEvent(const QEvent *event);
    void sendEvent(const QInputMethodEvent &event);

    enum StandardFormat
    {
        PreeditFormat,
        SelectionFormat,
    };

    QTextFormat standardFormat(QInputContext::StandardFormat s) const;

private:
    QInputContext(const QInputContext &);
};

%End
